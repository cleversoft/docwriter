extends ../layouts/backend

block head
    link(rel="stylesheet", href="/vendor/codemirror/lib/codemirror.css")
    link(rel="stylesheet", href="/vendor/fileupload/css/jquery.fileupload-ui.css")

block topnav
    form.nav.navbar-form.navbar-left(method="get", action="/admin/post")
        div.form-group
            input.form-control(name="q", placeholder="Search for posts", style="width: 300px")
        button.btn.btn-primary.btn-sm(type="submit")
            i.fa.fa-search

    div.nav.navbar-form.navbar-left
        a.btn.btn-sm.btn-info(href="/admin/post/add")
            i.fa.fa-plus
            |  WRITE NEW POST

        if post.status == 'activated'
            a.btn.btn-sm.btn-success(href="/post/#{post.slug}", style="margin: 0 5px;")
                i.fa.fa-eye
                |  VIEW

block content
    ol.breadcrumb
        li
            a(href="/admin/post") Posts
        li.active Edit post

    include ../partial/flash

    form#editForm.form-horizontal(method="post", action="/admin/post/edit/#{post._id}")
        div.form-group
            div.col-sm-6.form-group(style="margin-left: 0; margin-right: 0;")
                input.form-control(name="title", placeholder="Title", value="#{post.title}")
                small.help-block(style="display: none;")

            div.col-sm-6.form-group(style="margin-left: 0; margin-right: 0;")
                input.form-control(name="slug", placeholder="Slug", value="#{post.slug}")
                small.help-block(style="display: none;")

        div.form-group
            // Categories
            if categories
                div.col-sm-3
                    p.form-control-static Categories
                    for category in categories
                        div.checkbox
                            label
                                input(type="checkbox", name="categories[]", value="#{category._id}", checked=post.categories && post.categories.indexOf(category._id) != -1)
                                | #{category.name}

            // Heading style option
            div.col-sm-3
                div.form-horizontal
                    div.form-group
                        label.col-sm-4.control-label(for="heading_styles") Heading style
                        div.col-sm-8
                            select#headingStyles.form-control(name="heading_styles")
                                option(value="______", selected=post.heading_styles && post.heading_styles == "______") None
                                option(value="111111", selected=post.heading_styles && post.heading_styles == "111111") 1, 2, 3, ...
                                option(value="AAAAAA", selected=post.heading_styles && post.heading_styles == "AAAAAA") A, B, C, ...
                                option(value="aaaaaa", selected=post.heading_styles && post.heading_styles == "aaaaaa") a, b, c, ...
                                option(value="IIIIII", selected=post.heading_styles && post.heading_styles == "IIIIII") I, II, III, ...
                                option(value="iiiiii", selected=post.heading_styles && post.heading_styles == "iiiiii") i, ii, iii, ...
                                option(value="custom", selected=customHeadingStyle) Customize

                    div#customHeadingStyles(style=customHeadingStyle ? "display: block" : "display: none")
                        - for (var i = 1; i <= 6; i++)
                            - var heading = i + '<sup>' + (i == 1 ? 'st' : (i == 2 ? 'nd' : (i == 3 ? 'rd' : 'th'))) + '</sup> level heading';

                            div.form-group
                                label.col-sm-4.control-label(for="heading_style_h#{i}")
                                    != heading
                                div.col-sm-8
                                    select.form-control(name="heading_style_h#{i}")
                                        option(value="1", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "1") 1, 2, 3, ...
                                        option(value="A", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "A") A, B, C, ...
                                        option(value="a", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "a") a, b, c, ...
                                        option(value="I", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "I") I, II, III, ...
                                        option(value="i", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "i") i, ii, iii, ...
                                        option(value="_", selected=post.heading_styles[0] && post.heading_styles[i - 1] == "_") None
        div.form-group
            div.col-sm-12
                ul#editorTabs.nav.nav-tabs
                    li.active
                        a(href="#contentTab", data-toggle="tab") Content
                    li
                        a(href="#previewTab", data-toggle="tab") Preview

                div.tab-content
                    div#contentTab.tab-pane.active
                        div#editorToolbar
                            div.btn-group
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="undo")
                                    i.fa.fa-undo
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="redo")
                                    i.fa.fa-repeat

                                div.btn-group
                                    button.btn.btn-default.dropdown-toggle(type="button", data-toggle="dropdown")
                                        | H
                                        span.caret
                                    ul.dropdown-menu
                                        - for i in [1, 2, 3, 4, 5, 6]
                                            li
                                                a.markdownFormatButton(href="javascript: void(0);", data-command="heading", data-heading="#{i}")
                                                    | h#{i}

                                button.btn.btn-default.markdownFormatButton(type="button", data-command="bold")
                                    i.fa.fa-bold
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="italic")
                                    i.fa.fa-italic
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="strike")
                                    i.fa.fa-strikethrough
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="quote")
                                    i.fa.fa-quote-left
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="unordered-list")
                                    i.fa.fa-list-ul
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="ordered-list")
                                    i.fa.fa-list-ol
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="table")
                                    i.fa.fa-table
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="link")
                                    i.fa.fa-link
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="code")
                                    i.fa.fa-code
                                button.btn.btn-default.markdownFormatButton(type="button", data-command="rule") &mdash;
                                    i.fa.fa-ru

                                span.btn.btn-success.fileinput-button
                                    span Upload file
                                    input#uploader(type="file", name="file", data-url="/admin/file/upload")

                        div#editorContainer.d-markdown-editor
                            textarea#editor.form-control(name="content", style="height: 100%;") #{post.content}
                    div#previewTab.tab-pane
                        div#previewContainer
                            div.d-markdown-preview

            span.help-block.col-sm-12(style="display: none;")

        div#buttons.form-group
            div.col-sm-12
                button.btn.btn-primary(type="submit") SAVE
                button.btn.btn-default(type="submit", name="publish", value="true") SAVE and PUBLISH
                button.btn.btn-default(type="submit", name="draft", value="true") SAVE as DRAFT

block footerScript
    script(type="text/javascript", src="/vendor/autosave/jquery.autosave.min.js")
    script(type="text/javascript", src="/vendor/bootstrapvalidator/js/bootstrapValidator.min.js")
    script(type="text/javascript", src="/vendor/codemirror/lib/codemirror.js")
    script(type="text/javascript", src="/vendor/codemirror/mode/markdown/markdown.js")
    script(type="text/javascript", src="/vendor/fileupload/js/vendor/jquery.ui.widget.js")
    script(type="text/javascript", src="/vendor/fileupload/js/jquery.iframe-transport.js")
    script(type="text/javascript", src="/vendor/fileupload/js/jquery.fileupload.js")
    script(type="text/javascript", src="/vendor/marked/marked.js")
    script(type="text/javascript").
        $(document).ready(function() {
            // Custom styles trigger
            $('#headingStyles').on('change', function() {
                ($(this).val() == 'custom') ? $('#customHeadingStyles').slideDown(300) : $('#customHeadingStyles').slideUp(300);
            });

            // Markdown editor
            var editor = CodeMirror.fromTextArea($('#editor').get(0), {
                mode: 'markdown',
                lineNumbers: false,
                matchBrackets: true,
                lineWrapping: true,
                theme: 'default'
            });
            editor.on('change', function(e) {
                // To ensure the form pass content for auto-saving
                var text = e.getValue();
                $('#editor').val(text).trigger('change').trigger('keyup');
            });

            // Preview the content
            $('#editorTabs a').click(function(e) {
                e.preventDefault();
                $(this).tab('show');

                if ($(this).attr('href') == '#previewTab') {
                    var content = editor.getDoc().getValue();
                    $('.d-markdown-preview').html(marked(content));
                }
            });

            $('.markdownFormatButton').on('click', function() {
                var command  = $(this).attr('data-command'),
                    doc      = editor.getDoc(),
                    text     = doc.getSelection(),
                    length   = text.length,
                    lines    = text.split('\n'),
                    numLines = lines.length,
                    replace  = [];
                switch (command) {
                    case 'undo':
                        doc.undo();
                        break;
                    case 'redo':
                        doc.redo();
                        break;
                    case 'heading':
                        var heading = parseInt($(this).attr('data-heading'));
                        doc.replaceSelection(Array(heading + 1).join('#') + ' ' + text);
                        break;

                    case 'bold':
                        doc.replaceSelection(('**' == text.substr(0, 2) && '**' == text.substr(length - 2, 2)) ? text.substr(2, length - 4) : '**' + text + '**');
                        break;
                    case 'italic':
                        doc.replaceSelection(('*' == text.substr(0, 1) && '*' == text.substr(length - 1, 1)) ? text.substr(1, length - 2) : '*' + text + '*');
                        break;
                    case 'strike':
                        doc.replaceSelection(('~~' == text.substr(0, 2) && '~~' == text.substr(length - 2, 2)) ? text.substr(2, length - 4) : '~~' + text + '~~');
                        break;
                    case 'quote':
                        for (var i = 0; i < numLines; i++) {
                            replace.push('> ' == lines[i].substr(0, 2) ? lines[i].substr(2) : '> ' + lines[i]);
                        }
                        doc.replaceSelection(replace.join('\n'));
                        break;
                    case 'unordered-list':
                        for (var i = 0; i < numLines; i++) {
                            if ('* ' == lines[i].substr(0, 2)) {
                                replace.push(lines[i].substr(2));
                            } else if ('1. ' == lines[i].substr(0, 3)) {
                                replace.push('* ' + lines[i].substr(3));
                            } else {
                                replace.push('* ' + lines[i]);
                            }
                        }
                        doc.replaceSelection(replace.join('\n'));
                        break;
                    case 'ordered-list':
                        for (var i = 0; i < numLines; i++) {
                            if ('* ' == lines[i].substr(0, 2)) {
                                replace.push('1. ' + lines[i].substr(2));
                            } else if ('1. ' == lines[i].substr(0, 3)) {
                                replace.push(lines[i].substr(3));
                            } else {
                                replace.push('1. ' + lines[i]);
                            }
                        }
                        doc.replaceSelection(replace.join('\n'));
                        break;
                    case 'table':
                        replace.push('| Header | Header |');
                        replace.push('|--------|--------|')
                        replace.push('| Cell   | Cell   |');
                        doc.replaceSelection(replace.join('\n'));
                        break;

                    case 'link':
                        doc.replaceSelection('[text](url)');
                        break;
                    case 'code':
                        if ('```' == text.substr(0, 3) && '```' == text.substr(length - 3, 3)) {
                            if (numLines == 1) {
                                replace.push(text.substr(3, length - 6));
                            } else {
                                replace.push(text.substr(4, length - 8));
                            }
                        } else {
                            replace.push(numLines == 1 ? '```' + text + '```' : '```\n' + text + '\n```');
                        }
                        doc.replaceSelection(replace.join('\n'));
                        break;
                    case 'rule':
                        doc.replaceSelection('\n\n---' == text.substr(length - 5, 5) ? text.substr(0, length - 5) : text + '\n\n---');
                        break;

                    default:
                        break;
                }
            });

            // Upload handler
            $('#uploader').fileupload({
                dataType: 'json',
                done: function(e, data) {
                    var files = data.result.files;
                    $.each(data.result.files, function(index, file) {
                        var text = ['[', file.title, '](', file.url, ')'].join('');
                        if (['bmp', 'gif', 'jpeg', 'jpg', 'png'].indexOf(file.extension.toLowerCase()) != -1) {
                            text = '!' + text;
                        }
                        editor.doc.replaceSelection(text);
                    });
                }
            });

            $('#editForm')
                // Validate form
                .bootstrapValidator({
                    fields: {
                        title: {
                            validators: {
                                notEmpty: {
                                    message: 'The title is required'
                                }
                            }
                        },
                        slug: {
                            validators: {
                                notEmpty: {
                                    message: 'The slug is required'
                                }
                            }
                        },
                        content: {
                            validators: {
                                notEmpty: {
                                    message: 'The content is required'
                                }
                            }
                        }
                    },
                    submitHandler: function(validator, form) {
                        var $form = $(form);
                        var $button = $form.data('triggerSource') ? $form.data('triggerSource') : $form.find('button[type="submit"]:first');
                        var buttonLabel = $button.text();
                        var buttonWidth = $button.outerWidth();

                        var action = '';
                        if ($button.attr('name')) action = '&' + $button.attr('name') + '=true';

                        $button.html('<i class="fa fa-spinner fa-spin"></i>').css('width', buttonWidth);
                        $.post($form.attr('action'), $form.serialize() + action, function(result) {
                            $button.html(buttonLabel).css('width', 'auto');

                            var $flashContainer = $('<div class="alert"></div>');
                            var flashClose = '<a class="close" data-dismiss="alert" href="#" aria-hidden="true"> &times;</a>';

                            if (result.result == 'ok') {
                                $flashContainer.addClass('alert-success').html('The post has been updated successfully ' + flashClose).insertAfter('.breadcrumb');
                            } else {
                                $flashContainer.addClass('alert-error').html('Could not update the post' + flashClose).insertAfter('.breadcrumb');
                            }

                            // Auto close the alert messages
                            setTimeout(function() {
                                $flashContainer.alert('close');
                            }, 1000 * 5);
                        }, 'json');
                    }
                })
                // Generate slug based on post's title
                .find('input[name="title"]')
                    .on('keyup', function() {
                        var title = $(this).val(), $slug = $('#editForm').find('input[name="slug"]')
                        if (title == '') {
                            $slug.val('').trigger('keyup');
                            return;
                        }
                        $slug.trigger('keyup');
                        $.ajax({
                            type: 'POST',
                            url: '/admin/post/slug',
                            data: {
                                id: '#{post._id}',
                                title: title
                            },
                            dataType: 'json'
                        }).success(function(response) {
                            $slug.val(response.slug);
                        });
                    })
                    .end()
                // Auto save
                .autosave({
                    callbacks: {
                        trigger: {
                            method: 'interval',
                            options: {
                                interval: #{autoSave * 60 * 1000}
                            }
                        },
                        scope: 'all',
                        data: 'serializeObject',
                        condition: function(options, $inputs, formData, caller) {
                            if (#{autoSave} <= 0 || null == formData || '' == formData.title || '' == formData.slug || '' == formData.content) {
                                return false;
                            }
                            return true;
                        },
                        save: function(options, formData) {
                            $.ajax({
                                type: 'POST',
                                url: $('#editForm').attr('action'),
                                data: formData,
                                dataType: 'json'
                            }).success(function(response) {
                            });
                        }
                    }
                })
                .on('click', 'button[type="submit"]', function(e) {
                    var $this = $(this);
                    var $form = $('#editForm');

                    $form.data('triggerSource', $this);
                });
        });

